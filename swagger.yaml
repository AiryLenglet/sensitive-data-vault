openapi: "3.0.3"
info:
  version: "0.0.1"
  title: "Swagger Sensitive Data Vault"
  description: |
    Sensitive Data Vault POC, API responsible for managing sensitive data.<br>
    Securize sensitive data with encryption.<br>
    Provide tokenization of sensitive data for third party API.
paths:

  "/v1/vaults/{vaultId}":
    post:
      tags:
        - storage
      parameters:
        - name: "vaultId"
          in: "path"
          description: "ID of vault we want to store an object in"
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/StoreObjectRequest"
      responses:
        "200":
          description: "successful operation"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/StoreObjectResponse"

  "/v1/vaults/{vaultId}/{objectId}":
    post:
      tags:
        - detokenization
      parameters:
        - name: "vaultId"
          in: "path"
          description: "ID of vault we want to fetch the object"
          required: true
          schema:
            type: string
        - name: "objectId"
          in: "path"
          description: "ID of object we want to fe"
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/DetokenizeRequest"
      responses:
        "200":
          description: "successful operation"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/DetokenizeResponse"
    patch:
      parameters:
        - name: "vaultId"
          in: "path"
          description: "ID of vault we want to fetch the object"
          required: true
          schema:
            type: string
        - name: "objectId"
          in: "path"
          description: "ID of object we want to fe"
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/UpdateObjectRequest"
      responses:
        "200":
          description: "successful operation"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/StoreObjectResponse"

components:
  schemas:

    StoreFieldRequest:
      type: "object"
      properties:
        $value:
          type: "string"
        $type:
          type: "string"
        $readOnly:
          type: "boolean"
      required:
        - $value

    StoreObjectRequest:
      type: "object"
      properties:
        $objectId:
          type: "string"
      additionalProperties:
        $ref: "#/components/schemas/StoreFieldRequest"
      required:
        - $objectId
      example:
        $objectId: transaction-1234
        clientName:
          $value: "Jim Morrison"
        clientIdentifier:
          $value: "56456568458"
          $type: "clientId"
          $readOnly: true

    StoreFieldResponse:
      type: "object"
      properties:
        $name:
          type: "string"
          example: "clientName"
        $token:
          type: "string"
          example: "vault:83d0cea5aaaa7dde261f7f92362f31d555846d4addd1b5"

    StoreObjectResponse:
      type: "object"
      additionalProperties:
        $ref: "#/components/schemas/StoreFieldResponse"
      example:
        clientName:
          $token: "vault:83d0cea5aaaa7dde261f7f92362f31d555846d4addd1b5"
        clientIdentifier:
          $token: "vault:9a69ee011001c6e2f3dc94201b439d2c"

    DetokenizedObjectRequest:
      oneOf:
        - type: "object"
          additionalProperties:
            $ref: "#/components/schemas/DetokenizedFieldRequest"
        - type: "object"
          additionalProperties:
            $ref: "#/components/schemas/DetokenizedObjectRequest"

    DetokenizedFieldRequest:
      type: "object"
      properties:
        $token:
          type: "string"
      required:
        - $token

    DetokenizeRequest:
      type: "object"
      additionalProperties:
        $ref: "#/components/schemas/DetokenizedObjectRequest"
      example:
        clientName:
          $token: "vault:83d0cea5aaaa7dde261f7f92362f31d555846d4addd1b5"
        clientIdentifier:
          $token: "vault:9a69ee011001c6e2f3dc94201b439d2c"

    DetokenizedObjectResponse:
      additionalProperties:
        $ref: "#/components/schemas/DetokenizedFieldResponse"

    DetokenizedFieldResponse:
      type: "object"
      properties:
        $value:
          type: "string"
        $type:
          type: "string"
        $readOnly:
          type: "boolean"

    DetokenizeResponse:
      type: "object"
      additionalProperties:
        $ref: "#/components/schemas/DetokenizedObjectResponse"
      example:
        clientName:
          $value: "Jim Morrison"
        clientIdentifier:
          $value: "56456568458"
          $type: "clientId"
          $readOnly: true

    UpdateObjectRequest:
      type: "object"
      example:
        - op: "add"
          value:
            clientCountry:
              $value: "Switzerland"
              $type: "country"
              $readOnly: true
        - op: "replace"
          value:
            clientName:
              $value: "James Douglas Morrison"
        - op: "remove"
          value: "clientAddress"